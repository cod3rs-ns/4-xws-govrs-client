//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.12 at 01:04:06 AM CET 
//


package rs.acs.uns.sw.govrs.client.fx.serverdomain;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import rs.acs.uns.sw.govrs.client.fx.domain.Element;
import rs.acs.uns.sw.govrs.client.fx.editor.property_sheet.StringPropertyItem;
import rs.acs.uns.sw.govrs.client.fx.serverdomain.adapters.StringPropertyAdapter;

import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for odjeljak element declaration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;element name="odjeljak">
 *   &lt;complexType>
 *     &lt;complexContent>
 *       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *         &lt;choice>
 *           &lt;element ref="{http://www.parlament.gov.rs/schema/elementi}clan" maxOccurs="unbounded"/>
 *           &lt;element ref="{http://www.parlament.gov.rs/schema/elementi}pododjeljak" maxOccurs="unbounded"/>
 *         &lt;/choice>
 *         &lt;attGroup ref="{http://www.parlament.gov.rs/schema/elementi}standard_attrs"/>
 *       &lt;/restriction>
 *     &lt;/complexContent>
 *   &lt;/complexType>
 * &lt;/element>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "clan",
    "pododjeljak"
})
@XmlRootElement(name = "odjeljak", namespace = "http://www.parlament.gov.rs/schema/elementi")
public class Section extends Element{

    @XmlElement(namespace = "http://www.parlament.gov.rs/schema/elementi")
    protected List<Article> clan;
    @XmlElement(namespace = "http://www.parlament.gov.rs/schema/elementi")
    protected List<Subsection> pododjeljak;

    @XmlAttribute(name = "id", required = true)
    @XmlSchemaType(name = "anyURI")
    @XmlJavaTypeAdapter(StringPropertyAdapter.class)
    protected StringProperty id = new SimpleStringProperty();

    @XmlAttribute(name = "name")
    @XmlJavaTypeAdapter(StringPropertyAdapter.class)
    protected StringProperty name = new SimpleStringProperty("Odeljak");

    /**
     * Gets the value of the clan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the clan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getClan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Article }
     * 
     * 
     */
    public List<Article> getClan() {
        if (clan == null) {
            clan = new ArrayList<Article>();
        }
        return this.clan;
    }

    /**
     * Gets the value of the pododjeljak property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pododjeljak property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPododjeljak().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Subsection }
     * 
     * 
     */
    public List<Subsection> getPododjeljak() {
        if (pododjeljak == null) {
            pododjeljak = new ArrayList<Subsection>();
        }
        return this.pododjeljak;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id.get();
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id.set(value);
    }

    public StringProperty idProperty() {
        return id;
    }

    /**
     * Gets the value of the name property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getElementName() {
        return name.get();
    }

    /**
     * Sets the value of the name property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setElementName(String value) {
        this.name.set(value);
    }

    public StringProperty elementNameProperty() {
        return name;
    }


    public String getName() {
        return name.get();
    }

    public void setName(String value) {
        this.name.set(value);
    }

    @Override
    public void initElement() {
        // add all articles
        for (Element e:getClan()) {
            getChildren().add(e);
        }

        // add all subsections
        for (Element e:getPododjeljak()){
            getChildren().add(e);
        }

        // init observable list for all children
        for (Element e: getChildren()) {
            e.setElementParent(this);
            e.initElement();
        }

        createPropertyAttrs();
    }

    @Override
    public void createAndAddChild(Element element) {
        // add new article
        if (element instanceof Article) {
            Article a = (Article)element;
            a.setElementParent(this);
            a.createPropertyAttrs();
            getClan().add(a);
            getChildren().add(a);
        }

        // add new subsection
        if (element instanceof Subsection) {
            Subsection s = (Subsection)element;
            s.setElementParent(this);
            s.createPropertyAttrs();
            getPododjeljak().add(s);
            getChildren().add(s);
        }
    }

    @Override
    public void removeChild(Element element) {
        // remove article
        if (element instanceof Article) {
            Article a = (Article)element;
            getClan().remove(a);
            getChildren().remove(a);
        }

        // remove subsection
        if (element instanceof Subsection) {
            Subsection s = (Subsection) element;
            getPododjeljak().remove(s);
            getChildren().remove(s);
        }
    }

    @Override
    public void createPropertyAttrs() {
        // create property list for context
        StringPropertyItem idPropertyItem = new StringPropertyItem(
                idProperty(),
                "Generalno",
                "ID ",
                "Jedinstveni identifikator",
                false);
        StringPropertyItem namePropertyItem = new StringPropertyItem(
                elementNameProperty(),
                "Generalno",
                "Naziv",
                "Naziv elementa",
                true);
        getPropertyItems().add(idPropertyItem);
        getPropertyItems().add(namePropertyItem);
    }

    @Override
    public void preMarshaller() {
        for (Element child: getChildren()) {
            child.preMarshaller();
        }
    }
}
